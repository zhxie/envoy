syntax = "proto3";

package envoy.extensions.shared_key_providers.cryptomb.v3alpha;

import "google/protobuf/duration.proto";

import "udpa/annotations/sensitive.proto";
import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.shared_key_providers.cryptomb.v3alpha";
option java_outer_classname = "CryptombProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/contrib/envoy/extensions/shared_key_providers/cryptomb/v3alpha";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: CryptoMb shared key provider]
// [#extension: envoy.tls.shared_key_providers.cryptomb]

// A CryptoMbSharedKeyMethodConfig message specifies how the CryptoMb shared
// key provider is configured. The shared key provider provides ``SIMD``
// processing for ECDH computing operations.
// The provider works by gathering the operations into a worker-thread specific
// queue, and processing the queue using ``ipp-crypto`` library when the queue
// is full or when a timer expires.
// [#extension-category: envoy.tls.shared_key_providers]
message CryptoMbSharedKeyMethodConfig {
  // How long to wait until the per-thread processing queue should be
  // processed. If the processing queue gets full (eight compute
  // requests are received) it is processed immediately. However, if the
  // queue is not filled before the delay has expired, the requests
  // already in the queue are processed, even if the queue is not full.
  // In effect, this value controls the balance between latency and
  // throughput. The duration needs to be set to a value greater than or equal to 1 millisecond.
  google.protobuf.Duration poll_delay = 1 [(validate.rules).duration = {
    required: true
    gte {nanos: 1000000}
  }];
}
